//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "details")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub exam_id: i32,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub duration: i32,
    pub passing_score: i32,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::exam::Entity",
        from = "Column::ExamId",
        to = "super::exam::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Exam,
    #[sea_orm(has_many = "super::sections::Entity")]
    Sections,
}

impl Related<super::exam::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Exam.def()
    }
}

impl Related<super::sections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sections.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
